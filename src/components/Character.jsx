/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/fallguy_char.glb -o src/components/Character.jsx -r public
*/

import { Text, useAnimations, useGLTF } from "@react-three/drei";
import { useFrame, useGraph } from "@react-three/fiber";
import React, { useEffect, useMemo, useRef } from "react";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";

export function Character({
  animation = "wave",
  color = "yellow",
  name = "Player",
  ...props
}) {
  const group = useRef();
  const { scene, animations } = useGLTF("/models/character.glb", "draco/gltf/");

  const clone = useMemo(() => {
    const clonedScene = SkeletonUtils.clone(scene);
    return clonedScene;
  }, [scene]);

  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group);

  // Update màu khi color prop thay đổi
  useEffect(() => {
    console.log(`\n=== CHANGING COLOR TO: ${color} ===`);

    if (group.current) {
      group.current.traverse((child) => {
        if (child.isMesh && child.name === "Body") {
          // Method 3: Modify existing material
          child.material.color.set(color);
          child.material.map = null; 
          child.material.vertexColors = false; // Disable vertex colors
          child.material.emissive.setHex(0x000000);
          child.material.needsUpdate = true;

          console.log("After color change:");
          console.log("- new color:", child.material.color.getHexString());
          console.log("- material updated");
        }
      });
    }
  }, [color]);

  // Animation handling
  useEffect(() => {
    if (!actions || !animation) return;

    let prevAction = null;
    for (const name in actions) {
      if (actions[name].isRunning()) {
        prevAction = actions[name];
        break;
      }
    }

    const newAction = actions[animation];
    if (newAction) {
      newAction.reset().fadeIn(0.1).play();
    }

    if (prevAction && prevAction !== newAction) {
      prevAction.fadeOut(0.1);
    }

    return () => {
      newAction?.fadeOut(0.1);
    };
  }, [animation, actions]);

  const textRef = useRef();

  // Make text always face camera
  useFrame(({ camera }) => {
    if (textRef.current) {
      textRef.current.lookAt(camera.position);
    }
  });

  return (
    <group ref={group} {...props} dispose={null}>
      {/* Player name text */}
      <group ref={textRef}>
        <Text
          position-y={2.215}
          fontSize={0.5}
          anchorX="center"
          anchorY="middle"
          font="fonts/PaytoneOne-Regular.ttf"
        >
          {name}
          <meshBasicMaterial color="white" />
        </Text>
        <Text
          position-y={2.2}
          position-x={0.02}
          position-z={-0.02}
          fontSize={0.5}
          anchorX="center"
          anchorY="middle"
          font="fonts/PaytoneOne-Regular.ttf"
        >
          {name}
          <meshBasicMaterial color="black" />
        </Text>
      </group>

      {/* Character model */}
      <group name="Scene">
        <group
          name="FallGuys"
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.02}
          userData={{ name: "FallGuys" }}
        >
          <skinnedMesh
            name="Body"
            geometry={nodes.Body.geometry}
            material={materials["FallGuy_Only.011"]}
            skeleton={nodes.Body.skeleton}
            userData={{ name: "Body" }}
          />
          <skinnedMesh
            name="Eyes"
            geometry={nodes.Eyes.geometry}
            material={materials["phong2.011"]}
            skeleton={nodes.Eyes.skeleton}
            userData={{ name: "Eyes" }}
          />
          <primitive object={nodes.Root} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/character.glb", "draco/gltf/");
